// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: frieza.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriezaClient is the client API for Frieza service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriezaClient interface {
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (Frieza_BidirectionalStreamClient, error)
}

type friezaClient struct {
	cc grpc.ClientConnInterface
}

func NewFriezaClient(cc grpc.ClientConnInterface) FriezaClient {
	return &friezaClient{cc}
}

func (c *friezaClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (Frieza_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frieza_ServiceDesc.Streams[0], "/Frieza/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &friezaBidirectionalStreamClient{stream}
	return x, nil
}

type Frieza_BidirectionalStreamClient interface {
	Send(*Requests) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type friezaBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *friezaBidirectionalStreamClient) Send(m *Requests) error {
	return x.ClientStream.SendMsg(m)
}

func (x *friezaBidirectionalStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FriezaServer is the server API for Frieza service.
// All implementations must embed UnimplementedFriezaServer
// for forward compatibility
type FriezaServer interface {
	BidirectionalStream(Frieza_BidirectionalStreamServer) error
	mustEmbedUnimplementedFriezaServer()
}

// UnimplementedFriezaServer must be embedded to have forward compatible implementations.
type UnimplementedFriezaServer struct {
}

func (UnimplementedFriezaServer) BidirectionalStream(Frieza_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedFriezaServer) mustEmbedUnimplementedFriezaServer() {}

// UnsafeFriezaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriezaServer will
// result in compilation errors.
type UnsafeFriezaServer interface {
	mustEmbedUnimplementedFriezaServer()
}

func RegisterFriezaServer(s grpc.ServiceRegistrar, srv FriezaServer) {
	s.RegisterService(&Frieza_ServiceDesc, srv)
}

func _Frieza_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FriezaServer).BidirectionalStream(&friezaBidirectionalStreamServer{stream})
}

type Frieza_BidirectionalStreamServer interface {
	Send(*Response) error
	Recv() (*Requests, error)
	grpc.ServerStream
}

type friezaBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *friezaBidirectionalStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *friezaBidirectionalStreamServer) Recv() (*Requests, error) {
	m := new(Requests)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Frieza_ServiceDesc is the grpc.ServiceDesc for Frieza service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Frieza_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Frieza",
	HandlerType: (*FriezaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStream",
			Handler:       _Frieza_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "frieza.proto",
}
